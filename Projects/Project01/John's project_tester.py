
"""Project Tester.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m8OYmls04n5wqis3MXrKNzzoaqZiDPOP
"""

# pip install sklearn
# pip install pandas
# pip install six
# pip install pydotplus
import warnings
warnings.filterwarnings("ignore")
import pandas as pd
from sklearn.model_selection import train_test_split

import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LassoCV
from sklearn.model_selection import KFold
from sklearn import preprocessing

from sklearn.linear_model import LinearRegression

from sklearn.datasets import make_classification
from sklearn.ensemble import AdaBoostClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import f1_score
from sklearn.neural_network import MLPClassifier
from sklearn.neighbors import KNeighborsClassifier

import time
start_time = time.time()

# Load data
data = pd.read_csv("UNSW-NB15-BALANCED-TRAIN.csv")

data.head()

# factorization
# converting null values to str
data['ct_flw_http_mthd'] = data['ct_flw_http_mthd'].astype('str')
data['ct_flw_http_mthd'] = data['ct_flw_http_mthd'].astype('str')
data['is_ftp_login'] = data['is_ftp_login'].astype('str')
data['ct_ftp_cmd'] = data['ct_ftp_cmd'].astype('str')

data["sport"] = pd.to_numeric(data["sport"], errors="coerce")
data["dsport"] = pd.to_numeric(data["dsport"], errors="coerce")

# converting str to int
data['attack_cat'] = pd.factorize(data['attack_cat'])[0]
data['proto'] = pd.factorize(data['proto'])[0]
data['state'] = pd.factorize(data['state'])[0]
data['service'] = pd.factorize(data['service'])[0]

data['ct_flw_http_mthd'] = pd.factorize(data['ct_flw_http_mthd'])[0]
data['ct_flw_http_mthd'] = pd.factorize(data['ct_flw_http_mthd'])[0]
data['is_ftp_login'] = pd.factorize(data['is_ftp_login'])[0]
data['ct_ftp_cmd'] = pd.factorize(data['ct_ftp_cmd'])[0]

data['srcip'] = preprocessing.LabelEncoder().fit_transform(data['srcip'])
data['dstip'] = preprocessing.LabelEncoder().fit_transform(data['dstip'])

# data[data['dur'].isnull()]
# print(data.iloc[:500])

"""**Data Split Validation and Training Set**
x: Feature data
y: Target data

"""

columns_list = list(data.columns[0:-2])
data.dropna(axis='rows', inplace=True)

# Define variables
x = data[columns_list]
attack_cat = data['attack_cat']
label = data['Label']

# split dataset (90% train, 10% validation)
x_train, x_val, attack_cat_train, attack_cat_val, label_train, label_val = train_test_split(x, attack_cat, label, test_size = 0.1, random_state = 42)

"""
**Regression Analysis Process** PART 1
"""



# Create a linear regression model
attack_cat_model = LassoCV(cv=KFold(n_splits=5, shuffle=True), max_iter=1000, alphas=[0.01, 0.05, 0.1, 0.5, 1.0, 5.0])
label_model = LassoCV(cv=KFold(n_splits=5, shuffle=True), max_iter=1000, alphas=[0.01, 0.05, 0.1, 0.5, 1.0, 5.0])

# attack_cat_model = LassoCV(cv=5, alphas=[0.1, 0.01, 0.001])
# label_model = LassoCV(cv=5, alphas=[0.1, 0.01, 0.001])

attack_cat_model.fit(x_train, attack_cat_train)
label_model.fit(x_train, label_train)

attack_cat_model.fit(x_train, attack_cat_train)
important_features_ac = [feature for feature, coef in zip(x.columns, attack_cat_model.coef_) if abs(coef) > 0.0001]

label_model.fit(x_train, label_train)
important_features_label = [feature for feature, coef in zip(x.columns, label_model.coef_) if abs(coef) > 0.0001]

# # Proper way to implement but less accurate than my method
# selected_feature_indices_ac = attack_cat_model.coef_ != 0
# selected_feature_indices_label = attack_cat_model.coef_ != 0

# Get the names of the selected features for boolean list
# important_features_ac = [x.columns[i] for i in range(len(x.columns)) if selected_feature_indices_ac[i]]
# important_features_label = [x.columns[i] for i in range(len(x.columns)) if selected_feature_indices_label[i]]

print("Selected features for attack_cat: ", important_features_ac)
print("Selected features for label: ", important_features_label)



"""Drawing Feature Association Plot ------------------------------------------------------"""

# import matplotlib.pyplot as plt
# from matplotlib.pyplot import figure

# figure(figsize=(15, 18), dpi=80)
# plt.rcParams.update({'font.size': 15})

# # Plot the feature importance
# plt.title("Strength of Feature Association For Attack Category")
# plt.xlabel("Association Coefficient")
# plt.ylabel("Feature")
# plt.barh(x.columns, abs(attack_cat_model.coef_))
# plt.savefig('LinearRegressionFeatureAnalysisGraph.png', bbox_inches='tight', facecolor='w')
# # plt.show


# split dataset (70% train, 30% test)
x_train, x_test, y_attack_cat_train, y_attack_cat_test, y_label_train, y_label_test = train_test_split(x, attack_cat, label, test_size = 0.3, random_state = 42)


# Dropping Features --------------------------------------------------

# x_train = x_train[important_features_label]
# x_test = x_test[important_features_label]
# x_val = x_val[important_features_label]

x_train = x_train[important_features_ac]
x_test = x_test[important_features_ac]
x_val = x_val[important_features_ac]

new_features = [range(1,48)]
predicted_y = model.predict(new_features)

"""
Part 2 - Label Classification - AdaBoost classification Label ----------------------------------------------------------------------------
"""

clf = AdaBoostClassifier(n_estimators=100, random_state=0)
clf.fit(x_train, y_label_train)

# Use the classifier to predict the target variable for the validation data
label_pred = clf.predict(x_test)

# Calculate the accuracy of the predictions
accuracy = f1_score(y_label_test, label_pred)

print("AdaBoost accuracy: ", accuracy)


"""##**Part 3 - Attack Category Classification**"""


clf_attack_cat = KNeighborsClassifier(n_neighbors=5)

clf_attack_cat.fit(x_train, y_attack_cat_train)

# Use the classifier to predict the target variable for the validation data
attack_cat_pred = clf_attack_cat.predict(x_test)

# Calculate the accuracy of the predictions
accuracy = f1_score(y_attack_cat_test, attack_cat_pred, average='macro')

print("KNeighborsClassifier p3 accuracy: ", accuracy)
print("mean: ", np.mean(y_attack_cat_test == attack_cat_pred))

print("--- %s seconds ---" % (time.time() - start_time))

